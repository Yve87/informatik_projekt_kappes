Real Time Update With Externaly Rrunning BatchJob 
------------------------



This example can be either run on a single machine or two seperate machines.


Terminal 1 (Serving machine):
The code uses the data generated by the example `Run Jobs with Database Persistance <runWithDatabasePersistance.html>`_.

.. code-block:: py

    logging.basicConfig(level=logging.DEBUG)

    template = job.JobTemplate(runGASimple)
    template.setDefaults(indpb=0.8, tournsize=20, popSize=20, cxpb=0.5, mutpb=0.5, ngen=10, number_of_runs=1, verbose=False)

    jobCreator = job.JobCreator()
    jobCreator.addRange('cxpb', start=0.0, end=1.0, stepSize=0.04)
    jobCreator.addRange('mutpb', start=0.0, end=1.0, stepSize=0.04)
    # all other params will take defaults
    jobs = jobCreator.generateJobs(template)

    batchJob = job.BatchJob(jobs, 40)

    dbh = results.DatabaseResults('localhost', 'damian', 'damian', 'DeapBatch', 'demoTable')

    dbh.persistRun(batchJob)



Terminal 2 (Other machine):

.. code-block:: py

    logging.basicConfig(level=logging.DEBUG)

    dbh = results.DatabaseResults('localhost', 'damian', 'damian', 'DeapBatch', 'demoTable')
    # dbh = results.DatabaseResults('moggalana.fb2.hs-intern.de', 'damian', 'damian', 'DeapBatch', 'demoTable')

    plotter = display.Plotter(isIon=True)

    viewAngle = 0

    count = 0
    while True:

        if(count % 10 == 0):
            plotter.clearAx()
            filter = results.Filter(dbh, "mutpb", "cxpb", "result_avg", result_gen=10)  # pulls results from DB
            plotter.plot_3D(filter, xAxis="mutpb", yAxis="cxpb", zAxis="result_avg")
            plotter.setGrid(False)
            plotter.setAxisLimits(xLim=[0, 1], yLim=[0, 1])
            plotter.setAxisLabels(xLabel="Mutation Rate", yLabel="Crossover Rate", zLabel="Average Fitness")

        plotter.ax.view_init(elev=20, azim=viewAngle)
        viewAngle += 2
        plotter.draw()
        count += 1
        time.sleep(0.05)
